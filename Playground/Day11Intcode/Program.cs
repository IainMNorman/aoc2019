using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace Day11IntCode
{
    class Program
    {
        static void Main(string[] args)
        {
            var program = "3,8,1005,8,336,1106,0,11,0,0,0,104,1,104,0,3,8,102,-1,8,10,1001,10,1,10,4,10,108,1,8,10,4,10,101,0,8,28,1006,0,36,1,2,5,10,1006,0,57,1006,0,68,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,1002,8,1,63,2,6,20,10,1,106,7,10,2,9,0,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,102,1,8,97,1006,0,71,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,1002,8,1,122,2,105,20,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,101,0,8,148,2,1101,12,10,1006,0,65,2,1001,19,10,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,101,0,8,181,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,0,10,4,10,1002,8,1,204,2,7,14,10,2,1005,20,10,1006,0,19,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,102,1,8,236,1006,0,76,1006,0,28,1,1003,10,10,1006,0,72,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,102,1,8,271,1006,0,70,2,107,20,10,1006,0,81,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,1002,8,1,303,2,3,11,10,2,9,1,10,2,1107,1,10,101,1,9,9,1007,9,913,10,1005,10,15,99,109,658,104,0,104,1,21101,0,387508441896,1,21102,1,353,0,1106,0,457,21101,0,937151013780,1,21101,0,364,0,1105,1,457,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21102,179490040923,1,1,21102,411,1,0,1105,1,457,21101,46211964123,0,1,21102,422,1,0,1106,0,457,3,10,104,0,104,0,3,10,104,0,104,0,21101,838324716308,0,1,21101,0,445,0,1106,0,457,21102,1,868410610452,1,21102,1,456,0,1106,0,457,99,109,2,22101,0,-1,1,21101,40,0,2,21101,0,488,3,21101,478,0,0,1106,0,521,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,483,484,499,4,0,1001,483,1,483,108,4,483,10,1006,10,515,1101,0,0,483,109,-2,2105,1,0,0,109,4,2101,0,-1,520,1207,-3,0,10,1006,10,538,21101,0,0,-3,22102,1,-3,1,21202,-2,1,2,21101,0,1,3,21101,557,0,0,1105,1,562,109,-4,2105,1,0,109,5,1207,-3,1,10,1006,10,585,2207,-4,-2,10,1006,10,585,22101,0,-4,-4,1106,0,653,21201,-4,0,1,21201,-3,-1,2,21202,-2,2,3,21102,604,1,0,1106,0,562,21202,1,1,-4,21101,0,1,-1,2207,-4,-2,10,1006,10,623,21102,0,1,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,645,21202,-1,1,1,21101,0,645,0,106,0,520,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2105,1,0";

            var disk = program
                    .Split(',')
                    .Select(x => long.Parse(x))
                    .ToArray();
            
            Array.Resize(ref disk, disk.Length * 1000);

            var comp = new Computer(disk.ToArray(), "A");
            var paintCount = 0;
            var panels = new List<Panel>();
            var currentPos = new Point(0, 0);
            var facing = 0; //up

            panels.Add(new Panel() { Coords = currentPos, Color = 1 });

            while (comp.Running)
            {
                comp.Inputs.Clear();
                comp.Inputs.Enqueue(panels.FirstOrDefault(x => x.Coords == currentPos)?.Color ?? 0);
                comp.RunStep();

                if (comp.Outputs.Count == 2)
                {
                    paintCount++;

                    var color = (int)comp.Outputs.Dequeue();

                    if (panels.Any(x => x.Coords == currentPos))
                    {
                        panels.Single(x => x.Coords == currentPos).Color = color;
                    }
                    else
                    {
                        panels.Add(new Panel() { Coords = currentPos, Color = color });
                    }
                    
                    var turn = (int)comp.Outputs.Dequeue();
                    facing = (facing + ((turn * 2) - 1)) % 4;
                    facing = facing < 0 ? facing + 4 : facing;
                    switch (facing)
                    {
                        case 0:
                            currentPos.Y--;
                            break;
                        case 1:
                            currentPos.X++;
                            break;
                        case 2:
                            currentPos.Y++;
                            break;
                        case 3:
                            currentPos.X--;
                            break;
                    }
                }
            }

            for (int y = panels.Min(p => p.Coords.Y); y <= panels.Max(p => p.Coords.Y); y++)
            {
                for (int x = panels.Min(p => p.Coords.X); x <= panels.Max(p => p.Coords.X); x++)
                {
                    var panelColor = panels.FirstOrDefault(p => p.Coords == new Point(x, y))?.Color ?? 0;
                    Console.Write(panelColor == 1 ? "█" : " ");
                }
                Console.Write(Environment.NewLine);
            }
        }        
    }
}


//9131 too high